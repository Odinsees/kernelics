{"version":3,"sources":["features/Navigation/Navigation.module.scss","features/Todo/CreateTodolist/CreateTodolist.module.scss","features/Todo/TodoListsList/Todolists.module.scss","features/Todo/Todo.module.scss","utils/utils.ts","app/app-reducer.ts","features/Todo/todolist-reducer.ts","Components/TitleForm/TitleForm.tsx","features/Todo/CreateTodolist/CreateTodolist.tsx","Components/EditableSpan/EditableSpan.tsx","features/Todo/TodoListsList/Todolist/Todolist.tsx","features/Todo/TodoListsList/Todolists.tsx","features/Todo/Todo.tsx","features/Navigation/Navigation.tsx","Components/SnackBar/ErrorSnackBar.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx","features/Todo/TodoListsList/Todolist/Todolist.module.scss"],"names":["module","exports","syntheticRequest","value","Promise","res","rej","setTimeout","length","initialState","status","error","success","setAppStatus","type","setAppError","setAppSuccess","setEntityStatus","todolistID","entityStatus","TitleForm","props","useState","setError","formik","useFormik","initialValues","title","onSubmit","values","trim","callBack","resetForm","validationSchema","maxlength","maxLength","yup","shape","max","schemeCreator","useSelector","state","app","handleSubmit","TextField","id","label","variant","name","color","size","onChange","handleChange","onKeyPress","helperText","errors","Button","style","maxWidth","maxHeight","minWidth","minHeight","disabled","CreateTodolist","dispatch","useDispatch","className","createTodoWrapper","textTyping","newTitle","newTodolistTitle","then","newTodoTitle","EditableSpan","React","memo","edit","setEdit","setTitle","useEffect","autoFocus","e","currentTarget","onBlur","onDoubleClick","Todolist","deleteTodolistHandler","useCallback","todo","renameTodolistHandler","catch","err","disabledFromLoading","todolistWrapper","todoTitle","IconButton","aria-label","onClick","Delete","fontSize","todoTasks","Checkbox","TodoLists","todoLists","allTodoWrapper","map","Todo","ToDoPage","path","element","replace","to","Navigation","anchorEl","setAnchorEl","open","Boolean","handleClose","navigationWrapper","aria-controls","aria-haspopup","aria-expanded","undefined","event","Menu","MenuListProps","onClose","TransitionComponent","Fade","MenuItem","navigationLink","Alert","forwardRef","ref","elevation","AppState","ErrorSnackbar","reason","Snackbar","autoHideDuration","severity","sx","width","SuccessSnackbar","App","Box","flexGrow","AppBar","position","Toolbar","Typography","component","marginLeft","LinearProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","v1","filter","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c46b198.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigationLink\":\"Navigation_navigationLink__gqk6j\",\"active\":\"Navigation_active__2DzLw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createTodoWrapper\":\"CreateTodolist_createTodoWrapper__3YlBv\",\"textTyping\":\"CreateTodolist_textTyping__3Pi2f\",\"type\":\"CreateTodolist_type__Fqcdm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allTodoWrapper\":\"Todolists_allTodoWrapper__2_oVz\",\"textTyping\":\"Todolists_textTyping__250VP\",\"type\":\"Todolists_type__1Bgop\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToDoPage\":\"Todo_ToDoPage__2l37Y\"};","export const syntheticRequest = (value?: string) => {\r\n    return new Promise((res, rej) => {\r\n        setTimeout(() => {\r\n            if (value) {\r\n                if (value.length < 10) {\r\n                    return res('oll right')\r\n                } else {\r\n                    return rej('max title length is 10 symbol')\r\n                }\r\n            } else {\r\n                return res('oll right')\r\n            }\r\n        }, 2000)\r\n    })\r\n}","const initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    success: null as string | null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-SUCCESS\":\r\n            return {...state, success: action.success}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppSuccess = (success: string | null) => ({type: 'APP/SET-SUCCESS', success} as const)\r\n\r\n\r\n//types\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>\r\nexport type setAppErrorActionType = ReturnType<typeof setAppError>\r\nexport type setAppSuccessActionType = ReturnType<typeof setAppSuccess>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ActionsType =\r\n    | SetAppStatusActionType\r\n    | setAppErrorActionType\r\n    | setAppSuccessActionType","import {v1} from \"uuid\";\r\nimport {Dispatch} from \"redux\";\r\nimport {syntheticRequest} from \"../../utils/utils\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppError,\r\n    setAppErrorActionType,\r\n    setAppStatus,\r\n    SetAppStatusActionType, setAppSuccess, setAppSuccessActionType\r\n} from \"../../app/app-reducer\";\r\n\r\n\r\nconst initialState: initialStateType = []\r\n\r\nexport const todolistReducer = (state: TodolistType[] = initialState, action: ActionsType): TodolistType[] => {\r\n    switch (action.type) {\r\n        case \"TODOLIST/ADD-TODOLIST\":\r\n            return [{id: v1(), title: action.newTodoTitle, entityStatus: \"idle\"}, ...state]\r\n        case \"TODOLIST/DELETE-TODOLIST\":\r\n            return [...state.filter(todo => todo.id !== action.id)]\r\n        case \"TODOLIST/RENAME-TODOLIST\":\r\n            return [...state.map(todo => todo.id === action.id ? {...todo, title: action.title} : todo)]\r\n        case 'SET-ENTITY-STATUS':\r\n            return state.map(todo => todo.id === action.todolistID ? {\r\n                ...todo,\r\n                entityStatus: action.entityStatus\r\n            } : todo)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const addTodolist = (newTodoTitle: string) => ({type: 'TODOLIST/ADD-TODOLIST', newTodoTitle} as const)\r\nexport const deleteTodolistByID = (id: string) => ({type: 'TODOLIST/DELETE-TODOLIST', id} as const)\r\nexport const renameTodolistByID = (id: string, title: string) => ({type: 'TODOLIST/RENAME-TODOLIST', id, title} as const)\r\nexport const setEntityStatus = (todolistID: string, entityStatus: RequestStatusType) => ({\r\n    type: 'SET-ENTITY-STATUS',\r\n    todolistID,\r\n    entityStatus\r\n} as const)\r\n\r\n// thunk with synthetic Promise\r\nexport const addNewTodolist = (newTodolistTitle: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n    syntheticRequest()\r\n        .then(() => {\r\n            dispatch(setAppStatus('succeeded'))\r\n            dispatch(setAppSuccess('New TODO added'))\r\n            dispatch(addTodolist(newTodolistTitle))\r\n        })\r\n}\r\n\r\nexport const deleteTodolist = (todolistID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setEntityStatus(todolistID, 'loading'))\r\n    dispatch(setAppStatus('loading'))\r\n    syntheticRequest()\r\n        .then(() => {\r\n            dispatch(setAppStatus('succeeded'))\r\n            dispatch(setEntityStatus(todolistID, 'succeeded'))\r\n            dispatch(deleteTodolistByID(todolistID))\r\n        })\r\n}\r\n\r\nexport const renameTodolist = (todolistID: string, newTitle: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setEntityStatus(todolistID, 'loading'))\r\n    dispatch(setAppStatus('loading'))\r\n    syntheticRequest(newTitle)\r\n        .then(() => {\r\n            dispatch(setAppStatus('succeeded'))\r\n            dispatch(setEntityStatus(todolistID, 'succeeded'))\r\n            dispatch(renameTodolistByID(todolistID, newTitle))\r\n        })\r\n        .catch(err => {\r\n            dispatch(setAppError(err))\r\n            dispatch(setAppStatus('failed'))\r\n            dispatch(setEntityStatus(todolistID, 'failed'))\r\n        })\r\n}\r\n\r\n\r\n//types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype initialStateType = TodolistType[]\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof addTodolist>\r\n    | ReturnType<typeof deleteTodolistByID>\r\n    | ReturnType<typeof renameTodolistByID>\r\n    | ReturnType<typeof setEntityStatus>\r\n    | SetAppStatusActionType\r\n    | setAppErrorActionType\r\n    | setAppSuccessActionType\r\n","import React, {useState} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport * as yup from 'yup'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype TitleFormPropsType = {\r\n    callBack: (newTitle: string) => void\r\n    maxLength: number\r\n}\r\n\r\nexport const TitleForm = (props: TitleFormPropsType) => {\r\n\r\n    const schemeCreator = (maxlength: number = props.maxLength) => {\r\n        return yup.object().shape({\r\n            title: yup.string()\r\n                .max(maxlength, `max length is ${maxlength} symbol`)\r\n        })\r\n    }\r\n\r\n    const [error, setError] = useState(false)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: ''\r\n        },\r\n        onSubmit: (values) => {\r\n            if (values.title.trim() !== \"\") {\r\n                props.callBack(values.title)\r\n                formik.resetForm()\r\n            } else {\r\n                setError(true)\r\n            }\r\n        },\r\n        validationSchema: schemeCreator()\r\n    });\r\n\r\n    const onKeypressHandler = () => {\r\n        setError(false)\r\n    }\r\n\r\n    const status = useSelector<AppRootState, RequestStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <TextField\r\n                    id=\"title\"\r\n                    label=\"Title is required\"\r\n                    variant=\"outlined\"\r\n                    name=\"title\"\r\n                    color={'primary'}\r\n                    size=\"small\"\r\n                    value={formik.values.title}\r\n                    onChange={formik.handleChange}\r\n                    onKeyPress={onKeypressHandler}\r\n                    helperText={formik.errors.title}\r\n                    error={error}\r\n                    title={'maximum length 10 symbols'}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color='primary'\r\n                    style={{maxWidth: '37px', maxHeight: '70px', minWidth: '37px', minHeight: '39px'}}\r\n                    type=\"submit\"\r\n                    disabled={!!formik.errors.title || error || status === 'loading'}\r\n                >+\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import {useDispatch} from \"react-redux\";\r\nimport {addNewTodolist} from \"../todolist-reducer\";\r\nimport {TitleForm} from \"../../../Components/TitleForm/TitleForm\";\r\nimport style from './CreateTodolist.module.scss'\r\n\r\nexport const CreateTodolist = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const CreateTodoHandler = (newTitle: string,) => {\r\n        dispatch(addNewTodolist(newTitle))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.createTodoWrapper}>\r\n                <h2 className={style.textTyping}>Hi! Create a new TODO!</h2>\r\n                <TitleForm callBack={CreateTodoHandler} maxLength={10}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    callBack: (newTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({callBack, ...props}: PropsType) {\r\n\r\n    const status = useSelector<AppRootState, RequestStatusType>(state => state.app.status)\r\n\r\n    const [edit, setEdit] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    useEffect(() => {\r\n        setTitle(props.title)\r\n    }, [status, props.title])\r\n\r\n    const editModeHandler = () => {\r\n        setEdit(true)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        if (title === props.title) {\r\n            setEdit(false)\r\n        } else {\r\n            callBack(title)\r\n            setEdit(false)\r\n        }\r\n    }\r\n    return (\r\n        edit\r\n            ? <TextField\r\n                id=\"standard-basic\"\r\n                autoFocus\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onBlur={onBlurHandler}\r\n                variant=\"standard\"\r\n                disabled={props.disabled}\r\n            />\r\n            : <span onDoubleClick={editModeHandler}>{props.title}</span>\r\n    )\r\n})","import {deleteTodolist, renameTodolist, TodolistType} from \"../../todolist-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {EditableSpan} from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport style from './Todolist.module.scss'\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport React, {useCallback} from \"react\";\r\n\r\ntype TodolistPropsType = {\r\n    todo: TodolistType\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const deleteTodolistHandler = useCallback(function () {\r\n        dispatch(deleteTodolist(props.todo.id))\r\n    },[dispatch,props.todo.id])\r\n\r\n    const renameTodolistHandler = useCallback(function (newTodoTitle: string){\r\n        dispatch(renameTodolist(props.todo.id, newTodoTitle))\r\n    },[dispatch,props.todo.id])\r\n\r\n    const disabledFromLoading = props.todo.entityStatus === 'loading'\r\n\r\n    return (\r\n        <div className={style.todolistWrapper}>\r\n            <div className={style.todoTitle}>\r\n                <h3>\r\n                    <EditableSpan title={props.todo.title} callBack={renameTodolistHandler} disabled={disabledFromLoading}/>\r\n                    <IconButton aria-label=\"delete\" onClick={deleteTodolistHandler} disabled={disabledFromLoading}>\r\n                        <Delete fontSize=\"inherit\"/>\r\n                    </IconButton>\r\n                </h3>\r\n            </div>\r\n            <div className={style.todoTasks}>\r\n                <span>some task</span>\r\n                <Checkbox\r\n                    color=\"primary\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../../app/store\";\r\nimport {TodolistType} from \"../todolist-reducer\";\r\nimport style from './Todolists.module.scss'\r\n\r\nexport const TodoLists = () => {\r\n\r\n    const todoLists = useSelector<AppRootState, TodolistType[]>(state => state.todoLists)\r\n\r\n    return todoLists.length === 0\r\n        ? <h2 className={style.textTyping}>Your TODO will be here, when you create them.</h2>\r\n        : <div className={style.allTodoWrapper}>\r\n            {todoLists.map(todo => {\r\n                return (\r\n                    <Todolist\r\n                        key={todo.id}\r\n                        todo={todo}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n}","import {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {CreateTodolist} from \"./CreateTodolist/CreateTodolist\";\r\nimport {TodoLists} from \"./TodoListsList/Todolists\";\r\nimport style from './Todo.module.scss'\r\n\r\nexport const Todo = () => {\r\n    return (\r\n        <div className={style.ToDoPage}>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Navigate replace to=\"/create-new-todolist\"/>}/>\r\n                <Route path=\"/create-new-todolist\" element={<CreateTodolist/>}/>\r\n                <Route path=\"/my-todoLists\" element={<TodoLists/>}/>\r\n            </Routes>\r\n        </div>\r\n    )\r\n}","import Button from \"@material-ui/core/Button\"\r\nimport {Fade, Menu, MenuItem} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport style from './Navigation.module.scss'\r\n\r\nexport const Navigation = () => {\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div className={style.navigationWrapper}>\r\n            <Button\r\n                id=\"demo-positioned-button\"\r\n                aria-controls=\"demo-positioned-menu\"\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={open ? 'true' : undefined}\r\n                onClick={handleClick}\r\n                variant=\"contained\"\r\n                color={\"info\"}\r\n            >\r\n                Menu\r\n            </Button>\r\n            <Menu\r\n                id=\"fade-menu\"\r\n                MenuListProps={{\r\n                    'aria-labelledby': 'fade-button',\r\n                }}\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                TransitionComponent={Fade}\r\n            >\r\n                <MenuItem onClick={handleClose}>\r\n                    <Link className={style.navigationLink} to=\"/create-new-todolist\">\r\n                        Create new TODOLIST\r\n                    </Link>\r\n                </MenuItem>\r\n                <MenuItem onClick={handleClose}>\r\n                    <Link className={style.navigationLink} to=\"/my-todoLists\">\r\n                        My TODOLIST\r\n                    </Link>\r\n                </MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setAppError, setAppSuccess} from \"../../app/app-reducer\";\r\nimport {AppRootState} from \"../../app/store\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const AppState = () => {\r\n    return useSelector((state: AppRootState) => state.app)\r\n}\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = AppState().error\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\nexport function SuccessSnackbar() {\r\n\r\n    const success = AppState().success\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppSuccess(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={success !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"success\" sx={{width: '100%'}}>\r\n                {success}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Todo} from \"../features/Todo/Todo\";\r\nimport {Navigation} from \"../features/Navigation/Navigation\";\r\nimport {AppBar, Box, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar, SuccessSnackbar} from \"../Components/SnackBar/ErrorSnackBar\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootState, RequestStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <Box style={{flexGrow: 1}}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Navigation/>\r\n                        <Typography variant=\"h6\" component=\"div\" style={{flexGrow: 1, marginLeft: '20px'}}>\r\n                            Your Todolist\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                {status === 'loading' &&\r\n                <Box sx={{width: '100%'}}>\r\n                    <LinearProgress/>\r\n                </Box>\r\n                }\r\n            </Box>\r\n            <Todo/>\r\n            <ErrorSnackbar/>\r\n            <SuccessSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {todolistReducer} from \"../features/Todo/todolist-reducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    app: appReducer,\r\n    todoLists: todolistReducer,\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\n\r\n//use LocalStorage\r\n\r\n// let preloadedState;\r\n// const persistedTodolistString = localStorage.getItem(\"appState\")\r\n// if (persistedTodolistString){\r\n//     preloadedState = JSON.parse(persistedTodolistString)\r\n// }\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// store.subscribe(()=>{\r\n//     localStorage.setItem(\"appState\", JSON.stringify(store.getState()))\r\n// })\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n      <HashRouter>\r\n          <Provider store={store}>\r\n              <App />\r\n          </Provider>\r\n      </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistWrapper\":\"Todolist_todolistWrapper__2xJVx\",\"todoTitle\":\"Todolist_todoTitle__3QROY\",\"todoTasks\":\"Todolist_todoTasks__QvFWN\"};"],"sourceRoot":""}